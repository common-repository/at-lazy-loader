<?php
/**
 * Plugin Name: AT Lazy Loader
 * Description: Lazy loads assets into a Wordpress Site
 * Version: 1.0.0
 * Author: Asen Technology
 * Author URI: https://www.asentechnology.com
 */
?>
<?php
 class AT_Lazy_Loader { const version = '1.0.0'; function __construct() { add_action('wp_enqueue_scripts', array(__CLASS__, 'load_script')); add_action('admin_init', array(__CLASS__, 'register_settings')); add_action('admin_menu', array(__CLASS__, 'register_options_page')); self::load_loaders(); } static function load_script() { wp_enqueue_script( 'at-lazy-loader-script', plugin_dir_url(__FILE__) . 'at-lazy-loader.js', array(), self::version, true ); } static function register_settings() { add_option('at_lazy_loader_image_placeholder', 'blank'); register_setting( 'at_lazy_loader_settings', 'at_lazy_loader_image_placeholder' ); } static function register_options_page() { add_options_page( 'AT Lazy Loader', 'Lazy Loader', 'manage_options', 'at_lazy_loader_menu_slug', array(__CLASS__, 'at_lazy_loader_options_page') ); } static function at_lazy_loader_options_page() { echo '<div><h1>AT Lazy Loader</h1><form method="post" action="options.php">'; settings_fields('at_lazy_loader_settings'); echo '<table class="form-table"><tbody><tr valign="top"><th scope="row">Image Placeholder</th><td>'; echo '<label><input type="radio" name="at_lazy_loader_image_placeholder" value="blank" '; echo get_option('at_lazy_loader_image_placeholder') == 'blank' ? 'checked' : ''; echo '> Blank</label><br><label><input type="radio" name="at_lazy_loader_image_placeholder" value="low-res-image" '; echo get_option('at_lazy_loader_image_placeholder') == 'low-res-image' ? 'checked' : ''; echo '> Low Res Image</label>'; echo '<p style="font-size: 11px;">Note: to use <i>Low Res Image</i> on already uploaded images, you will need to regenerate your thumbnails using '; echo '<a href="https://wordpress.org/plugins/regenerate-thumbnails/" target="_blank">this</a> or a similar plugin.</p>'; echo '<td></tr></tbody></table>'; submit_button(); echo '</form></div>'; } static function load_loaders() { new AT_Lazy_Load_Images(); } } new AT_Lazy_Loader(); ?>
<?php
 class AT_Lazy_Load_Images { function __construct() { self::register_custom_image_size(); if (!is_admin()) { add_action('wp_head', array(__CLASS__, 'buffer_start')); add_action('wp_footer', array(__CLASS__, 'buffer_end')); } } static function register_custom_image_size() { add_image_size('at-lazy-loader-low-res-image', 100); } static function buffer_start() { ob_start(array(__CLASS__, 'edit_content')); } static function buffer_end() { ob_end_flush(); } static function edit_content($content) { return preg_replace_callback( '#<(img)([^>]+?)(>(.*?)</\\1>|[\/]?>)#si', array(__CLASS__, 'process_image'), $content ); } static function process_image($matches) { $attributes = wp_kses_hair($matches[2], wp_allowed_protocols()); if (empty($attributes['src'])) { return $matches[0]; } $image_src = $attributes['src']['value']; list($width, $height) = getimagesize($image_src); $placeholder_image = self::get_placeholder($image_src, $width, $height); unset($attributes['src'], $attributes['data-lazy-src']); $attributes_str = self::build_attributes_string($attributes); $image = '<img src="'; $image .= $placeholder_image; $image .= '" data-at-lazy-loader-src="'; $image .= $image_src; $image .= '" width="'; $image .= $width; $image .= '" height="'; $image .= $height; $image .= '" '; $image .= $attributes_str; $image .= '>'; return $image; } static function get_placeholder($image, $width, $height) { switch (get_option('at_lazy_loader_image_placeholder')) { case 'low-res-image': $image_width = round((100 * $height) / $width); $placeholder_image = preg_replace( '/(\.[^.]+)$/', sprintf('%s$1', '-100x' . $image_width), $image ); break; case 'blank': $placeholder_image = plugin_dir_url(__FILE__) . 'blank.png'; break; } return $placeholder_image; } static function build_attributes_string($attributes) { $string = array(); foreach ($attributes as $name => $attribute) { $value = $attribute['value']; if ('' === $value) { $string[] = sprintf('%s', $name); } else { $string[] = sprintf('%s="%s"', $name, esc_attr($value)); } } return implode(' ', $string); } static function console($string) { echo '<script>'; echo 'var results = `' . json_encode($string) . '`; '; echo 'results = JSON.parse(results); '; echo 'console.log(results); '; echo '</script>'; } } ?>
